Chain of Responsibility Pattern

Chain of Responsibility е pattern от типа на Behavior pattern, които решават проблеми с разпределянето на отговорността на класовете. Основното при тях е кой клас, какви отговорности да има. С този тип pattern-и може бързо и лесно да се разширява кода.
Chain of Responsibility или "прехвърляне на отговорности". Основната идея на този pattern е първият, който може да обработи заявката я обработва, ако не я прехвърля на следващия и така до края на йерархията. Всеки клас има инстанция на класа под него.
Създава се абстрактен клас, който съдържа даден метод и всеки негов наследник трябва да имплементира този метод, като метода трябва да има код, който да се обработва.




Facade Pattern

Facade Pattern e pattern от типа на Structural pattern, които описват начин за комбиниране на обекти или вече съществуващи обекти с цел създаване на нова функционалност.
Facade Pattern е най-простия pattern от този тип. Той скрива цялата функционалност от класове зад фасадата. Фасадата е интерфейс удобен за клиента, който върши някаква работа и скрива сложността след себе си.Така клиента комуникира посредством фасадата.




Model View Controller

MVC e pattern от типа на Arhitectural pattern, които решават проблеми свързани с цялостната архитектура на проекта.
MVC e pattern на ниво бизнес логика. Това е pattern, чиято идея е да раздели като логика на отделни модули controller-ите, view-тата и model-ите.
Model това са отделни части свързани с данните. Те представляват отделни класове с пропъртита.
View това е потребителският интерфейс, който генерираме, като това генериране става през някакви темплайти.
Controller се грижи за връзката с потребителите.